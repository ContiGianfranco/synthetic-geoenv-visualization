#version 330 core

in vec3 vertexNormal;
in vec3 vWorldPos;

uniform vec3 player_pos;


out vec4 screenColor;

// Iluminacion ambiental de Phong
vec3 phongAmbientIllumination(vec4 textureColor) {
    vec3 ka = textureColor.xyz;
    vec3 ia = vec3(1.,.75,.75);

    vec3 ambientIllumination = ka * ia;

    return ambientIllumination;
}

// Iluminacion direccional de Phong
vec3 directPhong(vec4 textureColor) {

    vec3 lightVec = normalize(vec3(-.75,-.5,-1.));

    // Iluminacion difusa de Phong
    vec3 kd = textureColor.xyz;
    vec3 id = vec3(1.,.75,.75);
    vec3 diffuseIllumination = clamp(dot(lightVec, vertexNormal), 0.0, 1.0)*kd*id;

    // Iluminacion especular de Phong
    vec3 ks = vec3(1.0,1.0,1.0);
    vec3 is = id;
    
    vec3 viewerVector = normalize(player_pos - vWorldPos);
    vec3 reflectionVector = reflect(-lightVec, vertexNormal);

    float RdotV = clamp(dot(reflectionVector, viewerVector), 0.0, 1.0);
    
    float uGlossiness = 1.0;
    vec3 uKsFactor = vec3(1.0,1.0,1.0);

    vec3 specularIllumination = pow(RdotV, uGlossiness)*ks*is*uKsFactor;

    vec3 phongIllumination = diffuseIllumination + specularIllumination;
    return phongIllumination;
}

void main()
{
    vec4 textureColor = vec4(0.4,0.6,0.0675, 1.0);

    vec3 ambientIllumination = phongAmbientIllumination(textureColor);
    vec3 directIlumination = directPhong(textureColor);

    vec3 resultColor = ambientIllumination + directIlumination;

    screenColor = vec4(resultColor, 1.0);
}